/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export interface BodyCreateTaskTasksPost {
  title: string;
  description: string;
  duration: number;
  priority: number;
  deadline: string;
}

export interface BodyUpdateTaskTasksTaskIDPut {
  title: string;
  description: string;
  duration: number;
  priority: number;
  deadline: string;
  editID: number;
}

export interface CreateUserRequest {
  username: string;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface UserResponse {
  id: number;
  username: string;
  is_active: boolean;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

/**
 * Create a new user account.
 * @summary Create User Endpoint
 */
export const createUser = (
    createUserRequest: CreateUserRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserResponse>> => {


    return axios.post(
      `/users/create`,
      createUserRequest,options
    );
  }



export const getCreateUserMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: CreateUserRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: CreateUserRequest}, TContext> => {

const mutationKey = ['createUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};




      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, {data: CreateUserRequest}> = (props) => {
          const {data} = props ?? {};

          return  createUser(data,axiosOptions)
        }




  return  { mutationFn, ...mutationOptions }}

    export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
    export type CreateUserMutationBody = CreateUserRequest
    export type CreateUserMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create User Endpoint
 */
export const useCreateUser = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: CreateUserRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createUser>>,
        TError,
        {data: CreateUserRequest},
        TContext
      > => {

      const mutationOptions = getCreateUserMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }

/**
 * Create a new task, save it in the database, and schedule events for it.
 * @summary Create Task
 */
export const createTaskTasksPost = (
    bodyCreateTaskTasksPost: BodyCreateTaskTasksPost, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {

    const formUrlEncoded = new URLSearchParams();
formUrlEncoded.append(`title`, bodyCreateTaskTasksPost.title)
formUrlEncoded.append(`description`, bodyCreateTaskTasksPost.description)
formUrlEncoded.append(`duration`, bodyCreateTaskTasksPost.duration.toString())
formUrlEncoded.append(`priority`, bodyCreateTaskTasksPost.priority.toString())
formUrlEncoded.append(`deadline`, bodyCreateTaskTasksPost.deadline)

    return axios.post(
      `/tasks/`,
      formUrlEncoded,options
    );
  }



export const getCreateTaskTasksPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTaskTasksPost>>, TError,{data: BodyCreateTaskTasksPost}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createTaskTasksPost>>, TError,{data: BodyCreateTaskTasksPost}, TContext> => {

const mutationKey = ['createTaskTasksPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};




      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTaskTasksPost>>, {data: BodyCreateTaskTasksPost}> = (props) => {
          const {data} = props ?? {};

          return  createTaskTasksPost(data,axiosOptions)
        }




  return  { mutationFn, ...mutationOptions }}

    export type CreateTaskTasksPostMutationResult = NonNullable<Awaited<ReturnType<typeof createTaskTasksPost>>>
    export type CreateTaskTasksPostMutationBody = BodyCreateTaskTasksPost
    export type CreateTaskTasksPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Task
 */
export const useCreateTaskTasksPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTaskTasksPost>>, TError,{data: BodyCreateTaskTasksPost}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createTaskTasksPost>>,
        TError,
        {data: BodyCreateTaskTasksPost},
        TContext
      > => {

      const mutationOptions = getCreateTaskTasksPostMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }

/**
 * Update an existing task and reschedule its events.
 * @summary Update Task
 */
export const updateTaskTasksTaskIDPut = (
    taskID: number,
    bodyUpdateTaskTasksTaskIDPut: BodyUpdateTaskTasksTaskIDPut, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {

    const formUrlEncoded = new URLSearchParams();
formUrlEncoded.append(`title`, bodyUpdateTaskTasksTaskIDPut.title)
formUrlEncoded.append(`description`, bodyUpdateTaskTasksTaskIDPut.description)
formUrlEncoded.append(`duration`, bodyUpdateTaskTasksTaskIDPut.duration.toString())
formUrlEncoded.append(`priority`, bodyUpdateTaskTasksTaskIDPut.priority.toString())
formUrlEncoded.append(`deadline`, bodyUpdateTaskTasksTaskIDPut.deadline)
formUrlEncoded.append(`editID`, bodyUpdateTaskTasksTaskIDPut.editID.toString())

    return axios.put(
      `/tasks/${taskID}`,
      formUrlEncoded,options
    );
  }



export const getUpdateTaskTasksTaskIDPutMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTaskTasksTaskIDPut>>, TError,{taskID: number;data: BodyUpdateTaskTasksTaskIDPut}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateTaskTasksTaskIDPut>>, TError,{taskID: number;data: BodyUpdateTaskTasksTaskIDPut}, TContext> => {

const mutationKey = ['updateTaskTasksTaskIDPut'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};




      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTaskTasksTaskIDPut>>, {taskID: number;data: BodyUpdateTaskTasksTaskIDPut}> = (props) => {
          const {taskID,data} = props ?? {};

          return  updateTaskTasksTaskIDPut(taskID,data,axiosOptions)
        }




  return  { mutationFn, ...mutationOptions }}

    export type UpdateTaskTasksTaskIDPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateTaskTasksTaskIDPut>>>
    export type UpdateTaskTasksTaskIDPutMutationBody = BodyUpdateTaskTasksTaskIDPut
    export type UpdateTaskTasksTaskIDPutMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Update Task
 */
export const useUpdateTaskTasksTaskIDPut = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTaskTasksTaskIDPut>>, TError,{taskID: number;data: BodyUpdateTaskTasksTaskIDPut}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateTaskTasksTaskIDPut>>,
        TError,
        {taskID: number;data: BodyUpdateTaskTasksTaskIDPut},
        TContext
      > => {

      const mutationOptions = getUpdateTaskTasksTaskIDPutMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }

/**
 * Delete a task and its events.
 * @summary Delete Task
 */
export const deleteTaskTasksTaskIDDelete = (
    taskID: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {


    return axios.delete(
      `/tasks/${taskID}`,options
    );
  }



export const getDeleteTaskTasksTaskIDDeleteMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTaskTasksTaskIDDelete>>, TError,{taskID: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTaskTasksTaskIDDelete>>, TError,{taskID: number}, TContext> => {

const mutationKey = ['deleteTaskTasksTaskIDDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};




      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTaskTasksTaskIDDelete>>, {taskID: number}> = (props) => {
          const {taskID} = props ?? {};

          return  deleteTaskTasksTaskIDDelete(taskID,axiosOptions)
        }




  return  { mutationFn, ...mutationOptions }}

    export type DeleteTaskTasksTaskIDDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTaskTasksTaskIDDelete>>>

    export type DeleteTaskTasksTaskIDDeleteMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Task
 */
export const useDeleteTaskTasksTaskIDDelete = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTaskTasksTaskIDDelete>>, TError,{taskID: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteTaskTasksTaskIDDelete>>,
        TError,
        {taskID: number},
        TContext
      > => {

      const mutationOptions = getDeleteTaskTasksTaskIDDeleteMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }

/**
 * Return all tasks for a user.
 * @summary List User Tasks
 */
export const listUserTasksTasksUserUsernameGet = (
    username: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {


    return axios.get(
      `/tasks/user/${username}`,options
    );
  }




export const getListUserTasksTasksUserUsernameGetQueryKey = (username?: string,) => {
    return [
    `/tasks/user/${username}`
    ] as const;
    }


export const getListUserTasksTasksUserUsernameGetQueryOptions = <TData = Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>, TError = AxiosError<HTTPValidationError>>(username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListUserTasksTasksUserUsernameGetQueryKey(username);



    const queryFn: QueryFunction<Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>> = ({ signal }) => listUserTasksTasksUserUsernameGet(username, { ...(signal ? { signal } : {}), ...axiosOptions });





   return  { queryKey, queryFn, enabled: !!(username), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListUserTasksTasksUserUsernameGetQueryResult = NonNullable<Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>>
export type ListUserTasksTasksUserUsernameGetQueryError = AxiosError<HTTPValidationError>


export function useListUserTasksTasksUserUsernameGet<TData = Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>, TError = AxiosError<HTTPValidationError>>(
 username: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>,
          TError,
          Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListUserTasksTasksUserUsernameGet<TData = Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>, TError = AxiosError<HTTPValidationError>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>,
          TError,
          Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListUserTasksTasksUserUsernameGet<TData = Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>, TError = AxiosError<HTTPValidationError>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List User Tasks
 */

export function useListUserTasksTasksUserUsernameGet<TData = Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>, TError = AxiosError<HTTPValidationError>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listUserTasksTasksUserUsernameGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListUserTasksTasksUserUsernameGetQueryOptions(username,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Return the most recent task for a user.
 * @summary Get Latest User Task
 */
export const getLatestUserTaskTasksUserUsernameLatestGet = (
    username: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {


    return axios.get(
      `/tasks/user/${username}/latest`,options
    );
  }




export const getGetLatestUserTaskTasksUserUsernameLatestGetQueryKey = (username?: string,) => {
    return [
    `/tasks/user/${username}/latest`
    ] as const;
    }


export const getGetLatestUserTaskTasksUserUsernameLatestGetQueryOptions = <TData = Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>, TError = AxiosError<HTTPValidationError>>(username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLatestUserTaskTasksUserUsernameLatestGetQueryKey(username);



    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>> = ({ signal }) => getLatestUserTaskTasksUserUsernameLatestGet(username, { ...(signal ? { signal } : {}), ...axiosOptions });





   return  { queryKey, queryFn, enabled: !!(username), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetLatestUserTaskTasksUserUsernameLatestGetQueryResult = NonNullable<Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>>
export type GetLatestUserTaskTasksUserUsernameLatestGetQueryError = AxiosError<HTTPValidationError>


export function useGetLatestUserTaskTasksUserUsernameLatestGet<TData = Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>, TError = AxiosError<HTTPValidationError>>(
 username: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>,
          TError,
          Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLatestUserTaskTasksUserUsernameLatestGet<TData = Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>, TError = AxiosError<HTTPValidationError>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>,
          TError,
          Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLatestUserTaskTasksUserUsernameLatestGet<TData = Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>, TError = AxiosError<HTTPValidationError>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Latest User Task
 */

export function useGetLatestUserTaskTasksUserUsernameLatestGet<TData = Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>, TError = AxiosError<HTTPValidationError>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestUserTaskTasksUserUsernameLatestGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetLatestUserTaskTasksUserUsernameLatestGetQueryOptions(username,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Return all events linked to a given task.
 * @summary List Events From Task
 */
export const listEventsFromTaskEventsListFromTaskTaskIdGet = (
    taskId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {


    return axios.get(
      `/events/list_from_task/${taskId}`,options
    );
  }




export const getListEventsFromTaskEventsListFromTaskTaskIdGetQueryKey = (taskId?: number,) => {
    return [
    `/events/list_from_task/${taskId}`
    ] as const;
    }


export const getListEventsFromTaskEventsListFromTaskTaskIdGetQueryOptions = <TData = Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>, TError = AxiosError<HTTPValidationError>>(taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListEventsFromTaskEventsListFromTaskTaskIdGetQueryKey(taskId);



    const queryFn: QueryFunction<Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>> = ({ signal }) => listEventsFromTaskEventsListFromTaskTaskIdGet(taskId, { ...(signal ? { signal } : {}), ...axiosOptions });





   return  { queryKey, queryFn, enabled: !!(taskId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListEventsFromTaskEventsListFromTaskTaskIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>>
export type ListEventsFromTaskEventsListFromTaskTaskIdGetQueryError = AxiosError<HTTPValidationError>


export function useListEventsFromTaskEventsListFromTaskTaskIdGet<TData = Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>, TError = AxiosError<HTTPValidationError>>(
 taskId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>,
          TError,
          Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListEventsFromTaskEventsListFromTaskTaskIdGet<TData = Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>, TError = AxiosError<HTTPValidationError>>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>,
          TError,
          Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListEventsFromTaskEventsListFromTaskTaskIdGet<TData = Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>, TError = AxiosError<HTTPValidationError>>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Events From Task
 */

export function useListEventsFromTaskEventsListFromTaskTaskIdGet<TData = Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>, TError = AxiosError<HTTPValidationError>>(
 taskId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEventsFromTaskEventsListFromTaskTaskIdGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListEventsFromTaskEventsListFromTaskTaskIdGetQueryOptions(taskId,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Return all events belonging to a given user.
 * @summary List Events From User
 */
export const listEventsFromUserEventsListFromUserUsernameGet = (
    username: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {


    return axios.get(
      `/events/list_from_user/${username}`,options
    );
  }




export const getListEventsFromUserEventsListFromUserUsernameGetQueryKey = (username?: string,) => {
    return [
    `/events/list_from_user/${username}`
    ] as const;
    }


export const getListEventsFromUserEventsListFromUserUsernameGetQueryOptions = <TData = Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>, TError = AxiosError<HTTPValidationError>>(username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListEventsFromUserEventsListFromUserUsernameGetQueryKey(username);



    const queryFn: QueryFunction<Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>> = ({ signal }) => listEventsFromUserEventsListFromUserUsernameGet(username, { ...(signal ? { signal } : {}), ...axiosOptions });





   return  { queryKey, queryFn, enabled: !!(username), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListEventsFromUserEventsListFromUserUsernameGetQueryResult = NonNullable<Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>>
export type ListEventsFromUserEventsListFromUserUsernameGetQueryError = AxiosError<HTTPValidationError>


export function useListEventsFromUserEventsListFromUserUsernameGet<TData = Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>, TError = AxiosError<HTTPValidationError>>(
 username: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>,
          TError,
          Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListEventsFromUserEventsListFromUserUsernameGet<TData = Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>, TError = AxiosError<HTTPValidationError>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>,
          TError,
          Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListEventsFromUserEventsListFromUserUsernameGet<TData = Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>, TError = AxiosError<HTTPValidationError>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List Events From User
 */

export function useListEventsFromUserEventsListFromUserUsernameGet<TData = Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>, TError = AxiosError<HTTPValidationError>>(
 username: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listEventsFromUserEventsListFromUserUsernameGet>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListEventsFromUserEventsListFromUserUsernameGetQueryOptions(username,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Delete all events associated with a task.
 * @summary Delete Events From Task
 */
export const deleteEventsFromTaskEventsDeleteAllFromTaskTaskIdDelete = (
    taskId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {


    return axios.delete(
      `/events/delete_all_from_task/${taskId}`,options
    );
  }



export const getDeleteEventsFromTaskEventsDeleteAllFromTaskTaskIdDeleteMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEventsFromTaskEventsDeleteAllFromTaskTaskIdDelete>>, TError,{taskId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteEventsFromTaskEventsDeleteAllFromTaskTaskIdDelete>>, TError,{taskId: number}, TContext> => {

const mutationKey = ['deleteEventsFromTaskEventsDeleteAllFromTaskTaskIdDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};




      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteEventsFromTaskEventsDeleteAllFromTaskTaskIdDelete>>, {taskId: number}> = (props) => {
          const {taskId} = props ?? {};

          return  deleteEventsFromTaskEventsDeleteAllFromTaskTaskIdDelete(taskId,axiosOptions)
        }




  return  { mutationFn, ...mutationOptions }}

    export type DeleteEventsFromTaskEventsDeleteAllFromTaskTaskIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEventsFromTaskEventsDeleteAllFromTaskTaskIdDelete>>>

    export type DeleteEventsFromTaskEventsDeleteAllFromTaskTaskIdDeleteMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Delete Events From Task
 */
export const useDeleteEventsFromTaskEventsDeleteAllFromTaskTaskIdDelete = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteEventsFromTaskEventsDeleteAllFromTaskTaskIdDelete>>, TError,{taskId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteEventsFromTaskEventsDeleteAllFromTaskTaskIdDelete>>,
        TError,
        {taskId: number},
        TContext
      > => {

      const mutationOptions = getDeleteEventsFromTaskEventsDeleteAllFromTaskTaskIdDeleteMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
